// Roll No.23307
//Batch : E-11

#include <stdio.h>
#include <stdlib.h>
#define max 50

void showStr(char *str)
{
	printf("%s\n",str);
}

int length(char *str)
{
		int l=0;
		int i=0;
		while(*(str+i)!='\0')
		{
			l++;
			i++;
		}
		return l;

}

void reverse(char *str,char *pal,int l)
{
	int i,j=l-1;
	for(i=0;i<l;i++)
	{
		*(pal+i)=*(str+j);
		j--;
	}
}

int cmp(char *str1,char *str2,int l1,int l2)
{
	if(l1!=l2)
	{
		return -1;
	}
	int i;
	for(i=0;i<l1;i++)
	{
		if(*(str1+i)!=*(str2+i))
		{
			return -1;
		}
	}
	return 0;
}

void copy(char *str,char *pal,int l)
{
	int i;
	for(i=0;i<l;i++)
	{
		*(pal+i)=*(str+i);

	}
}

int substring(char *str,char *sub,int length,int subl)
{
	int i,k=0;
		int counter=0;
		for(i=0;i<length;i++)
		{
			k=i;
			int j=0;
			while(k<=length)
			{
				if(j==subl)
				{
					counter++;
					break;
				}
				if(str[k++]!=sub[j++])
				{
					break;
				}
			}
		}
		return counter;
}

int main(void) {
	int l1,l2,ch;
	char *str,*pal,*sub;
	int c=0;
	do
		{
			printf("\nMenu :\n1. Get Strings.\n2. Show Strings.\n3. Length of Strings.\n4. Palindrome.\n5. Compare Strings.\n6. Copy (String 1 in another string).\n7. Reverse.\n8. SubString.\n9. Exit.\nEnter your choice : ");
			fseek(stdin,0,SEEK_END);
			scanf("%d",&ch);
			switch(ch)
				{
					case 1:	printf("\nEnter String : ");
							str=(char *)malloc(50*sizeof(char));
							scanf("%s",str);
							c++;
							break;

					case 2:	if(c==0)
							{
								printf("Please Enter a string");
								break;
							}
							printf("\nString is : ");
							showStr(str);
							break;

					case 3:	if(c==0)
							{
								printf("Please Enter a string\n");
								break;
							}
							l1=length(str);
							printf("\nLength of the String is : %d\n",l1);
							break;

					case 4:	if(c==0)
							{
								printf("Please Enter a string\n");
								break;
							}
							printf("\nString is : ");
							showStr(str);
							l1=length(str);
							pal=(char *)malloc(l1*sizeof(char));
							reverse(str,pal,l1);
							int flag=cmp(str,pal,l1,l1);
							if(flag==0)
							{
								printf("It is a Palindrome\n");
							}
							else
							{
								printf("It is not a Palindrome\n");
							}
							free(pal);
							break;

					case 5:	if(c==0)
							{
								printf("Please Enter a string");
								break;
							}
							printf("\nString 1 is:");
							showStr(str);
							printf("Enter Another String : ");
							pal=(char *)malloc(max*sizeof(char));
							scanf("%s",pal);
							l1=length(str);
							l2=length(pal);
							flag=cmp(str,pal,l1,l2);
							if(flag==0)
							{
								printf("Strings are the same\n");
							}
							else
							{
								printf("Strings are not same\n");
							}
							free(pal);
							break;

					case 6:	if(c==0)
							{
								printf("Please Enter a string\n");
								break;
							}
							l1=length(str);
							pal=(char *)malloc(l1*sizeof(char));
							reverse(str,pal,l1);
							printf("\nReverse String is:");
							showStr(pal);
							free(pal);
							break;

					case 7:	if(c==0)
							{
								printf("Please Enter a string\n");
								break;
							}
							printf("\nOriginal String is:");
							showStr(str);
							l1=length(str);
							pal=(char *)malloc(l1*sizeof(char));
							copy(str,pal,l1);
							printf("\nCopied String is: %s",pal);
							free(pal);
							break;

					case 8:	if(c==0)
							{
								printf("Please Enter a string");
								break;
							}
							printf("\nEnter Substring:");
							sub=(char *)malloc(50*sizeof(char));
							scanf("%s",sub);
							int sl;
							sl=length(sub);
							int l1=length(str);
							if(sl>l1)
							{
								printf("\nSubstring Length cannot exceed String length");
								break;
							}
							int counter;
							counter=substring(str,sub,l1,sl);
							printf("\nSubstring was found %d times\n",counter);
							free(sub);
							break;

					case 9:	return 0;

					default:printf("\nEnter Valid Option");
				}
			}
	while(ch!=9);
	return 0;
}
